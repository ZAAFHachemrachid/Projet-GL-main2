@startuml

' Style configurations
skinparam classAttributeIconSize 0
skinparam class {
    BackgroundColor White
    ArrowColor Black
    BorderColor Black
}

' User Management
class User {
    - id: int
    - username: string
    - password: string
    - email: string
    - role: Role
    + login(username: string, password: string): bool
    + logout(): void
    + updateProfile(data: dict): void
    + changePassword(oldPassword: string, newPassword: string): bool
}

class AdminFrame {
    + createAdmin(): void
    + updateAdmin(): void
    + deleteAdmin(): void
    + listAdmins(): List<User>
    + assignRole(user: User, role: Role): void
}

enum Role {
    ADMIN
    MANAGER
    STAFF
}

' Product Management
class Product {
    - id: int
    - sku: string
    - name: string
    - description: string
    - price: float
    - category: Category
    + create(): void
    + update(data: dict): void
    + delete(): void
    + getDetails(): dict
    + updatePrice(newPrice: float): void
}

class Category {
    - id: int
    - name: string
    - description: string
    + create(): void
    + update(data: dict): void
    + delete(): void
    + getProducts(): List<Product>
}

' Stock Management
class StockManager {
    + addStock(product_id: int, quantity: int, date: Date, note: string): void
    + removeStock(product_id: int, quantity: int, date: Date, note: string): void
    + getStockMovements(filters: dict): List<StockMovement>
    + checkStockLevel(product_id: int): int
    + generateStockAlert(): List<Alert>
}

class StockMovement {
    - id: int
    - product_id: int
    - quantity: int
    - type: MovementType
    - date: Date
    - note: string
    + create(): void
    + getDetails(): dict
}

enum MovementType {
    ADDITION
    REMOVAL
    ADJUSTMENT
}

' Relationships
User "1" -- "1" Role
AdminFrame -- User : manages >
Product "1" -- "1" Category
Product "1" -- "*" StockMovement
StockManager -- StockMovement : manages >
StockMovement -- MovementType

@enduml
